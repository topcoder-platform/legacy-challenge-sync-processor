'use strict';

var _chai = require('chai');

var _nodeMocksHttp = require('node-mocks-http');

var _nodeMocksHttp2 = _interopRequireDefault(_nodeMocksHttp);

var _supertest = require('supertest');

var _supertest2 = _interopRequireDefault(_supertest);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env node, mocha */
/* eslint no-unused-expressions: 0 */
/* eslint no-console: off */
var request = {}; // define REQUEST
var response = {}; // define RESPONSE

describe('topcoder', function () {
  var successChecks = [function (req, res) {
    res.checkCount = res.checkCount ? res.checkCount : 0;
    ++res.checkCount;
    console.log('check 1 ran. Check count is now: ' + res.checkCount);
    return true;
  }, function (req, res) {
    res.checkCount = res.checkCount ? res.checkCount : 0;
    ++res.checkCount;
    console.log('check 2 ran. Check count is now: ' + res.checkCount);
    return true;
  }];

  var failureChecks = [function (req, res) {
    res.checkCount = res.checkCount ? res.checkCount : 0;
    ++res.checkCount;
    console.log('check 1 ran. Check count is now: ' + res.checkCount);
    return true;
  }, function (req, res) {
    res.checkCount = res.checkCount ? res.checkCount : 0;
    ++res.checkCount;
    console.log('check 2 ran. Check count is now: ' + res.checkCount);
    return false;
  }];

  describe('#healthCheck middleware', function () {
    beforeEach(function (done) {
      // before each test, reset the REQUEST and RESPONSE variables to be send into the middle ware
      request = _nodeMocksHttp2.default.createRequest({
        method: 'GET',
        url: '/health'
      });

      response = _nodeMocksHttp2.default.createResponse();
      response.checkCount = 0;
      console.log('Check count is set to: ' + response.checkCount);

      done();
    });

    it('should run ' + successChecks.length + ' check functions and return ' + _index2.default.HTTP_HEALTHY, function (done) {
      var mw = _index2.default.middleware(successChecks);

      mw(request, response); // close middleware
      (0, _chai.expect)(response.checkCount).to.equal(successChecks.length);
      (0, _chai.expect)(response.statusCode).to.equal(_index2.default.HTTP_HEALTHY);
      done();
    }); // close it

    it('should run ' + successChecks.length + ' check functions and return ' + _index2.default.HTTP_FAILED, function (done) {
      var mw = _index2.default.middleware(failureChecks);

      mw(request, response); // close middleware
      (0, _chai.expect)(response.checkCount).to.equal(failureChecks.length);
      (0, _chai.expect)(response.statusCode).to.equal(_index2.default.HTTP_FAILED);
      done();
    }); // close it
  });

  describe('#healthCheck init server with no check funcs', function () {
    var server = {};
    beforeEach(function (done) {
      console.log('--- starting new server instance with no check funcs');
      server = _index2.default.init(done);
    });

    afterEach(function (done) {
      console.log('--- shutting down server instance with no check funcs');
      server.close(done);
    });

    it('should 404 respond to /', function (done) {
      console.log('testing root with no check funcs');
      (0, _supertest2.default)(server).get('/').expect(404, done);
    });

    it('should ' + _index2.default.HTTP_HEALTHY + ' respond to /health', function (done) {
      console.log('testing health endpoint with no check funcs');
      (0, _supertest2.default)(server).get('/health').expect(_index2.default.HTTP_HEALTHY, { checksRun: 0 }, done);
    });
  });

  describe('#healthCheck init server with success check funcs', function () {
    var server = {};
    beforeEach(function (done) {
      console.log('--- starting new server instance with check funcs');
      server = _index2.default.init(successChecks, done);
    });

    afterEach(function (done) {
      console.log('--- shutting down server instance with check funcs');
      server.close(done);
    });

    it('should 404 respond to /', function (done) {
      console.log('testing root');
      (0, _supertest2.default)(server).get('/').expect(404, done);
    });

    it('should ' + _index2.default.HTTP_HEALTHY + ' respond to /health', function (done) {
      console.log('testing health endpoint');
      (0, _supertest2.default)(server).get('/health').expect(function (res) {
        if (res.statusCode !== _index2.default.HTTP_HEALTHY) {
          throw new Error('Expected ' + _index2.default.HTTP_HEALTHY + ' got ' + res.statusCode);
        }

        if (!res.body.checksRun || res.body.checksRun !== successChecks.length) {
          throw new Error('Expected checkCount of ' + successChecks.length + ' got ' + res.body.checksRun);
        }
      }).end(done);
    });
  });

  describe('#healthCheck init server with failure check funcs', function () {
    var server = {};
    beforeEach(function (done) {
      server = _index2.default.init(failureChecks);
      done();
    });

    afterEach(function (done) {
      server.close(done);
    });

    it('should 404 respond to /', function (done) {
      console.log('testing root');
      (0, _supertest2.default)(server).get('/').expect(404, done);
    });

    it('should ' + successChecks.length + ' check functions and respond ' + _index2.default.HTTP_FAILED + ' to /health', function (done) {
      console.log('testing health endpoint');
      (0, _supertest2.default)(server).get('/health').expect(function (res) {
        if (res.statusCode === _index2.default.HTTP_FAILED) {
          return true;
        }
        throw new Error('Expected ' + _index2.default.HTTP_FAILED + ' got ' + res.statusCode);
      }).end(done);
    });
  });
});